// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

// Define the User model
model User {
  id              Int     @id @default(autoincrement())
  name            String  @unique
  email           String  @unique
  password        String
  balance         Float   @default(0)
  payees          Payee[] // Relationship to payees
  payeesForOthers Payee[] @relation("PayeeUser") // Inverse relation for being a payee for others

  // Relationship to transactions as sender
  transactionsAsSender Transaction[] @relation("SenderTransactions")

  // Relationship to transactions as receiver
  transactionsAsReceiver Transaction[] @relation("ReceiverTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Payee model
model Payee {
  id        Int  @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id])
  userId    Int
  payeeUser User @relation("PayeeUser", fields: [payeeId], references: [id])
  payeeId   Int
}

// Define the Transaction model
model Transaction {
  id         Int       @id @default(autoincrement())
  sender     User      @relation(name: "SenderTransactions", fields: [senderId], references: [id])
  senderId   Int
  receiver   User      @relation(name: "ReceiverTransactions", fields: [receiverId], references: [id])
  receiverId Int
  amount     Float
  createdAt  DateTime  @default(now())
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  transactions Transaction[]
}
